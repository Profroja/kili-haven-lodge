# Generated by Django 5.2.5 on 2025-09-24 12:35

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Customer email address', max_length=254, unique=True)),
                ('full_name', models.CharField(help_text='Customer full name', max_length=200)),
                ('phone_number', models.CharField(help_text='Customer phone number', max_length=20)),
                ('nationality', models.CharField(help_text='Customer nationality', max_length=100)),
                ('id_passport_number', models.CharField(help_text='ID or Passport number', max_length=50, unique=True)),
                ('id_passport_photo', models.ImageField(help_text='ID or Passport photo', upload_to='customers/id_photos/')),
                ('guest_origin', models.CharField(help_text='Where the customer is coming from (city, country)', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='RoomType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Room type name (e.g., Standard, Deluxe, Suite)', max_length=100, unique=True)),
                ('price_per_day', models.DecimalField(decimal_places=2, help_text='Price per day in TZS', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_rooms', models.PositiveIntegerField(help_text='Total number of rooms of this type', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('description', models.TextField(blank=True, help_text='Room description and amenities')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this room type is available for booking')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Room Type',
                'verbose_name_plural': 'Room Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.PositiveIntegerField(help_text='Assigned room number', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('check_in_date', models.DateField(help_text='Check-in date')),
                ('check_out_date', models.DateField(help_text='Check-out date')),
                ('number_of_guests', models.PositiveIntegerField(help_text='Number of guests', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('purpose_of_visit', models.CharField(choices=[('leisure', 'Leisure'), ('business', 'Business'), ('other', 'Other')], default='leisure', help_text='Purpose of visit', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Special requests or accommodations')),
                ('signature_consent', models.CharField(help_text='Customer signature as consent', max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled')], default='pending', help_text='Reservation status', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount for the stay', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(help_text='Customer making the reservation', on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='kilimanager.customer')),
                ('room_type', models.ForeignKey(help_text='Selected room type', on_delete=django.db.models.deletion.CASCADE, to='kilimanager.roomtype')),
            ],
            options={
                'verbose_name': 'Reservation',
                'verbose_name_plural': 'Reservations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CheckOut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_out_time', models.DateTimeField(auto_now_add=True, help_text='Actual check-out time')),
                ('room_key_returned', models.BooleanField(default=False, help_text='Whether room key was returned')),
                ('room_condition', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('damaged', 'Damaged')], default='good', help_text='Condition of room after check-out', max_length=20)),
                ('additional_charges', models.DecimalField(decimal_places=2, default=0, help_text='Additional charges (damages, extra services, etc.)', max_digits=10)),
                ('final_amount', models.DecimalField(decimal_places=2, help_text='Final amount including additional charges', max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('bank_transfer', 'Bank Transfer'), ('mobile_money', 'Mobile Money')], help_text='Payment method used', max_length=20)),
                ('additional_notes', models.TextField(blank=True, help_text='Additional check-out notes')),
                ('checked_out_by', models.CharField(help_text='Staff member who checked out the guest', max_length=100)),
                ('reservation', models.OneToOneField(help_text='Associated reservation', on_delete=django.db.models.deletion.CASCADE, related_name='checkout', to='kilimanager.reservation')),
            ],
            options={
                'verbose_name': 'Check Out',
                'verbose_name_plural': 'Check Outs',
                'ordering': ['-check_out_time'],
            },
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.DateTimeField(auto_now_add=True, help_text='Actual check-in time')),
                ('room_key_given', models.BooleanField(default=False, help_text='Whether room key was given')),
                ('welcome_pack_given', models.BooleanField(default=False, help_text='Whether welcome pack was given')),
                ('additional_notes', models.TextField(blank=True, help_text='Additional check-in notes')),
                ('checked_in_by', models.CharField(help_text='Staff member who checked in the guest', max_length=100)),
                ('reservation', models.OneToOneField(help_text='Associated reservation', on_delete=django.db.models.deletion.CASCADE, related_name='checkin', to='kilimanager.reservation')),
            ],
            options={
                'verbose_name': 'Check In',
                'verbose_name_plural': 'Check Ins',
                'ordering': ['-check_in_time'],
            },
        ),
    ]
